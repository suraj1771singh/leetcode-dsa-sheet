import java.util.Arrays;
//---------------------UNION AND FIND

class Solution {
    int[] parent;
    int[] cnt;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        parent = new int[n];
        cnt = new int[n];
        for (int i = 0; i < n; i++)
            parent[i] = i;
        Arrays.fill(cnt, 1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1)
                    unionBySize(i, j);
            }
        }
        int malware[] = new int[n];
        for (int node : initial)
            malware[find(node)]++;
        Arrays.sort(initial);
        int max = 0, ans = -1;
        for (int node : initial) {
            if (malware[find(node)] == 1 && max < cnt[find(node)]) {
                ans = node;
                max = cnt[find(node)];
            }
        }
        if (max != 0)
            return ans;
        return initial[0];

    }

    int find(int u) {
        if (u == parent[u])
            return u;
        return parent[u] = find(parent[u]);
    }

    void unionBySize(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        if (pu == pv)
            return;
        if (cnt[pv] > cnt[pu]) {
            parent[pu] = pv;
            cnt[pv] += cnt[pu];
        } else {
            parent[pv] = pu;
            cnt[pu] += cnt[pv];
        }
    }

}